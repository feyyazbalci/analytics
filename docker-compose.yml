version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ecommerce_analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5438:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ecommerce-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5676:5672"    # AMQP port
      - "15676:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ecommerce-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
  
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: ecommerce-api-gateway
    environment:
      - NODE_ENV=development
      - PORT=3000
      - POSTGRES_URL=postgresql://postgres:postgres123@postgres:5432/ecommerce_analytics
      - REDIS_URL=redis://:redis123@redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - JWT_SECRET=your-super-secret-jwt-key-2024
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ecommerce-network
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    command: npm run dev

  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: ecommerce-analytics-service
    environment:
      - NODE_ENV=development
      - POSTGRES_URL=postgresql://postgres:postgres123@postgres:5432/ecommerce_analytics
      - REDIS_URL=redis://:redis123@redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ecommerce-network
    volumes:
      - ./services/analytics-service:/app
      - /app/node_modules
    command: npm run dev

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: ecommerce-order-service
    environment:
      - NODE_ENV=development
      - POSTGRES_URL=postgresql://postgres:postgres123@postgres:5432/ecommerce_analytics
      - REDIS_URL=redis://:redis123@redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ecommerce-network
    volumes:
      - ./services/order-service:/app
      - /app/node_modules
    command: npm run dev

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: ecommerce-notification-service
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - REDIS_URL=redis://:redis123@redis:6379
    depends_on:
      - redis
      - rabbitmq
    networks:
      - ecommerce-network
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    command: npm run dev

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api
      - REACT_APP_WS_URL=ws://localhost:3000
    ports:
      - "3001:3000"
    depends_on:
      - api-gateway
    networks:
      - ecommerce-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    ports:
      - "8080:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
      - frontend
    networks:
      - ecommerce-network


networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: